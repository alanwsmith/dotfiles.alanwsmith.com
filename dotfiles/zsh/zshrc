####################################################################
# Exports 

export TERM=screen-256color

if [ "$(tput cols)" -gt 65 ]; then
    sort -R "/Users/alan/workshop/dotfiles.alanwsmith.com/dotfiles/zsh/quotes" | \
    head -1 | \
    sed 's/--/\n    --/' | \
    sed 's/$/\n/' | \
    fold -w 64 -s
else
    sort -R "/Users/alan/workshop/dotfiles.alanwsmith.com/dotfiles/zsh/quotes" | \
    head -1 | \
    sed 's/--/\n    --/' | \
    sed 's/$/\n/'                         
fi

######################################################################
# Include public functions 

if [ -d "/Users/alan/workshop/dotfiles.alanwsmith.com/dotfiles/cli-shortcuts" ] 
then 
  for file in /Users/alan/workshop/dotfiles.alanwsmith.com/dotfiles/cli-shortcuts/*.zsh
  do 
    source "$file"
  done
fi 


######################################################################
# TODO: Get private functions into a directory

if [ -f ~/.zshrc-private ]; then
    source ~/.zshrc-private
fi


######################################################################
# Alias style functions 

# TODO: Move these to their own files

function sva () {
    source venv/bin/activate
}

function rc () {
    exec zsh 
}

function e () {
    exit 
}

# TODO: Update this so it takes more than one argument
function nv () {
	nvim $1
}

# Run ps then grep the results
function psg () {
    if [ "$1" ]
    then
        if [ "$2" ]
        then
            echo "You passed too many arguments"
        else
            ps aux | grep -i "$1"
        fi
    else
        echo "You need to pass an argument"
    fi
}

######################################################################
# ll

alias ll="ls -lh"
alias sl="ls -lh"
alias la="ls -lah"
alias l="ls -lh"

######################################################################
# Copy file or dir path to pasteboard

function pwc() {
    echo "pwc is deactivted until you figure out how to deal with '~' in the path"
#     if [ -z "$1" ]
#     then
#         pwd | tr -d '\n' | pbcopy
#     else
#         initial_string="$(pwd | tr -d '\n')/$1"
#         echo $initial_string | tr -d '\n' | pbcopy
#     fi
}

######################################################################
#Options 
######################################################################

# Setup so you don't have to type `cd` to get into a directory 
setopt AUTO_CD
setopt CDABLE_VARS

# Set colors for ls
export CLICOLOR=1
export LS_COLORS='di=1:fi=34:ln=31:pi=5:so=5:bd=5:cd=5:or=31'

# Don't keep any commands that start with a space to the history log
setopt HIST_IGNORE_SPACE



######################################################################
# Prmopt stuff


NEWLINE=$'\n'

COLOR_PROMPT='%F{15}'
# COLOR_BORDER='%F{248}'
# COLOR_BORDER='%F{88}'
# COLOR_BORDER='%F{81}'
COLOR_BORDER='%F{15}'
# COLOR_PRIMARY='%F{253}'
COLOR_PRIMARY='%F{15}'
COLOR_SECONDARY='%F{241}'
# COLOR_SECONDARY='%F{15}'
COLOR_TERTIARY='%F{241}'
# COLOR_SEPERATOR='%F{239}'
COLOR_SEPERATOR='%F{241}'
# COLOR_SEPERATOR='%F{15}'
COLOR_VENV='%F{136}'
COLOR_ERROR='%F{160}'
OFFSET_BORDER="${#COLOR_BORDER}"
OFFSET_PRIMARY="${#COLOR_PRIMARY}"
OFFSET_SECONDARY="${#COLOR_SECONDARY}"
OFFSET_SEPERATOR="${#COLOR_SEPERATOR}"
OFFSET_TERTIARY="${#COLOR_TERTIARY}"
OFFSET_VENV="${#COLOR_VENV}"
OFFSET_ERROR="${#COLOR_ERROR}"

### 

# function preexec() {
#     timer=$(($(print -P %D{%s%6.})/1000))
# }

function prompt_git_branch() {
    BRANCH_NAME=$(git branch --show-current 2> /dev/null)
    if [ $? -eq 0 ]; then
        echo -n " ${COLOR_SEPERATOR}路 ${COLOR_SECONDARY}[$BRANCH_NAME]"
        return $(( $OFFSET_SEPERATOR + $OFFSET_SECONDARY ))
    else
        return 0
    fi 
}

function prompt_git_status() {
    NUMBER_OF_CHANGES=$(git status --short 2> /dev/null | wc -l | tr -d " ")
    if [ $NUMBER_OF_CHANGES -ne "0" ]; then 
        echo -n "["
        ### Get Insertions and/or Deletions
        NUMBER_A=$(git diff --shortstat 2> /dev/null | cut -d' ' -f5)
        NUMBER_B=$(git diff --shortstat 2> /dev/null | cut -d' ' -f7)
        if [ -z "$NUMBER_B" ]; then
            echo -n $NUMBER_A  
        else
            echo -n $(($NUMBER_A + $NUMBER_B))
        fi
        echo -n "]"
        return 0
    else 
        return 0
    fi
}

function prompt_python_venv() {
    if [ -n "$VIRTUAL_ENV" ]; then 
        echo -n " ${COLOR_SEPERATOR}路 ${COLOR_VENV}VENV"
        return $(( $OFFSET_SEPERATOR + $OFFSET_VENV ))
    else
        return 0
    fi
}

function prompt_previous_exit_code() {
    if [[ $? -eq 0 ]]; then
        echo " ${COLOR_SEPERATOR}路 ${COLOR_SECONDARY}OK"
        return $(( $OFFSET_SEPERATOR + $OFFSET_SECONDARY ))
    else
        echo " ${COLOR_SEPERATOR}路 ${COLOR_ERROR}ERROR: $?"
        return $(( $OFFSET_SEPERATOR + $OFFSET_ERROR ))
    fi 
}


function precmd() {
    PREVIOUS_EXIT_STATUS=$(prompt_previous_exit_code)
    P="%F{34}$(dirs)$PREVIOUS_EXIT_STATUS$(prompt_python_venv)$(prompt_git_branch)$(prompt_git_status)"
    # P="%F{34}$(dirs)$(prompt_previous_exit_code)$(prompt_python_venv)$(prompt_git_branch)$(prompt_git_status)"
    P="${P}${NEWLINE}"
    PS1="${P}%f%b$ "
}


# Setup to use vim bindings
# bindkey -v

# Setup so up/down arrows go based of existing text
bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search

# Nice output for git log
function gl() {
	# Grab the initial output from git log and reverse it.
	INITIAL_OUTPUT=$(git log --decorate --oneline --abbrev-commit --graph --all --color=always | sed '1!G;h;$!d') 
	# Loop through it line by line
	while read -r THE_LINE
	do
		# Just output it if it's a commit (identifed by a "*")
		if [[ "$THE_LINE" =~ '\*' ]]; then
			echo "$THE_LINE"
		# Otherwise, flip the "/" and "\" characters
		else
			# Figure out which way to flip
			if [[ "$THE_LINE" =~ '/' ]]; then
				echo "$THE_LINE" | sed 's/\//\\/g;'
			else
				echo "$THE_LINE" | sed 's/\\/\//g;'
			fi
		fi
	done <<< $INITIAL_OUTPUT
}


# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
 
export PATH="/Users/alan/go/bin:$PATH"

export NODE_PATH="$(npm root -g):$NODE_PATH"

source $HOMEBREW_PREFIX/opt/chruby/share/chruby/chruby.sh 
source $HOMEBREW_PREFIX/opt/chruby/share/chruby/auto.sh 
chruby ruby-3.1.2

